apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'eclipse-wtp'

def leTime = System.currentTimeMillis()

repositories {
    maven {
      name "cobra"
      url "http://cobra.cs.uni-duesseldorf.de/artifactory/repo"
    } 
}

configurations.all {
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    compile group: 'de.prob', name: 'cli', version: '2.0.0-milestone-4-SNAPSHOT', changing: true
	compile "javax.servlet:servlet-api:2.5"
	compile 'com.google.inject.extensions:guice-servlet:3.0'
	compile 'com.google.code.gson:gson:1.7.1'
	compile 'de.prob:tla2b:1.0.3-SNAPSHOT'
}

def prettyName(String name) {
		String r1 = name.replaceAll("_", " ");
		StringBuffer sb = new StringBuffer();
		boolean upperCaseAllowed = true;
		for (int i = 0; i < r1.length(); i++) {
			char c = r1.charAt(i);
			if (!Character.isLowerCase(c)) {
				if (!upperCaseAllowed) {
					sb.append(" ");
				}
				upperCaseAllowed = true;
			} else
				upperCaseAllowed = false;
			sb.append(c);
		}
		return sb.toString();
	}

task examples << {
	result = [:]
	files { new File("examples").listFiles() }.each { 
		formalism -> 
			examples = new TreeMap()
		    formalism.listFiles().each {
				examples[prettyName(it.name)] =  it.text
			}
			result[formalism.getName()] = examples
	}
   def output = new groovy.json.JsonBuilder(result).toString()
   def out = new File('src/main/resources/javascripts/examples.js')
   if (out.exists()) out.delete()
   out << "example_list = "+output;
}


processResources {
	dependsOn examples
	doLast{
	   def out = new File('src/main/java/de/prob/web/TimeStamp.java')
	   if (out.exists()) out.delete()
	   out << 'package de.prob.web;\npublic class TimeStamp { \n    public static final String TIME="'+leTime+'"; \n}'
	   new File('src/main/webapp/js/').listFiles().each { if (it.getName().startsWith("javascripts")) it.deleteDir()  }  	
	   new File('src/main/webapp/css/').listFiles().each { if (it.getName().startsWith("stylesheets")) it.deleteDir()  }  	
	   copy {
		    from 'src/main/resources/javascripts'
		    into 'src/main/webapp/js/javascripts_'+leTime
		}
		copy {
		    from 'src/main/resources/stylesheets'
		    into 'src/main/webapp/css/stylesheets_'+leTime
		}
	}
}

def download(address,target) {
	    def file = new FileOutputStream(target)
	    def out = new BufferedOutputStream(file)
	    out << new URL(address).openStream()
	    out.close()
}

task downloadCli << {
		dir = 'src/main/webapp/probcli/'
		delete file(dir)
	    new File(dir).mkdirs() 
	
		['leopard64':'macos','linux':'linux','linux64':'linux64','win32':'windows'].each {
		n = it.getKey()
	
		targetdir = dir+it.getValue()
		targetzip = dir+"probcli_${n}.zip"
		url = "http://nightly.cobra.cs.uni-duesseldorf.de/cli/probcli_${n}.zip"
		download(url,targetzip)
	    FileTree zip = zipTree(targetzip)
	    copy {
		   from zip
		   into targetdir
	    }
		delete file(targetzip)
	}
	
	targetdir = dir+"windows/"
	targetzip = targetdir+"windowslib.zip"
	download("http://nightly.cobra.cs.uni-duesseldorf.de/cli/windowslib.zip",targetzip)
	FileTree zip = zipTree(targetzip)
	    copy {
		   from zip
		   into targetdir
	    }
	delete file(targetzip)
	

}


compileJava.dependsOn processResources
war.dependsOn downloadCli


httpPort = 8080
stopPort = 9451
stopKey = 'foo'
