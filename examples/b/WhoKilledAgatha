Persons = { "Agatha", "butler", "Charles"} /* it is more efficient in B to use enumerated sets; but in the eval window we cannot define them */
 &
 hates : Persons <-> Persons &
 richer : Persons <-> Persons &  /* richer /\ richer~ = {} & */
 richer /\ id(Persons) = {} &
 !(x,y,z).(x|->y:richer & y|->z:richer => x|->z:richer) &
 !(x,y).(x:Persons & y:Persons & x/=y => (x|->y:richer <=> y|->x /: richer)) &
 
 killer : Persons &   victim : Persons &
 killer|->victim : hates & /* A killer always hates his victim */
 killer|->victim /: richer & /* and is no richer than his victim */
 hates[{ "Agatha"}] /\ hates[{"Charles"}] = {} & /* Charles hates noone that Agatha hates. */
 hates[{ "Agatha"}] = Persons - {"butler"} & /* Agatha hates everybody except the butler. */
 !x.( x: Persons & x|-> "Agatha" /: richer => "butler"|->x : hates) & /* The butler hates everyone not richer than Aunt Agatha */
 hates[{ "Agatha"}] <: hates[{"butler"}] & /* The butler hates everyone whom Agatha hates.  */
 !x.(x:Persons => hates[{x}] /= Persons) /* Noone hates everyone. */ &
 victim =  "Agatha"
 
 /* & killer /= Agatha */  /* comment this out: the predicate becomes unsatisfiable */